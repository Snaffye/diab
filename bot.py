from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import joblib
import numpy as np

model = joblib.load("model.pkl")

questions = [
    ("–ö–∞–∫–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏? (–≤ –º–≥/–¥–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 90‚Äì200)", 90, 200),
    ("–ö–∞–∫–æ–µ —É –≤–∞—Å –≤–µ—Ä—Ö–Ω–µ–µ –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80‚Äì180)", 80, 180),
    ("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ª–∏—à–Ω–∏–π –≤–µ—Å? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ú–¢ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18‚Äì50)", 18, 50),
    ("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ —Å–ª–∞–¥–∫–æ–µ? (–æ—Ç 0 –¥–æ 10)", 0, 10),
    ("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∂–∞–∂–¥—É? (–æ—Ç 0 –¥–æ 10)", 0, 10),
    ("–ë—ã–≤–∞—é—Ç –ª–∏ —á–∞—Å—Ç—ã–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è? (–æ—Ç 0 –¥–æ 10)", 0, 10),
    ("–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å? (–æ—Ç 0 –¥–æ 10)", 0, 10),
    ("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç 10 –¥–æ 100)", 10, 100),
    ("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? (–æ—Ç 0 –¥–æ 10)", 0, 10)
]

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_states[chat_id] = {
        "answers": [],
        "current_question": 0,
        "in_progress": True
    }
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n\n" +
                                    questions[0][0])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message.text.strip()

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å
    if chat_id not in user_states or not user_states[chat_id]["in_progress"]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    state = user_states[chat_id]
    index = state["current_question"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ
    try:
        value = float(message)
        q_text, min_val, max_val = questions[index]
        if not (min_val <= value <= max_val):
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}.")
            return
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    state["answers"].append(value)
    state["current_question"] += 1

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if state["current_question"] < len(questions):
        next_question = questions[state["current_question"]][0]
        await update.message.reply_text(next_question)
    else:
        X = np.array(state["answers"]).reshape(1, -1)
        prediction = model.predict(X)[0]
        result = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" if prediction == 0 else "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        user_states[chat_id]["in_progress"] = False

def main():
    app = ApplicationBuilder().token("7473045709:AAF8lTAD9t-xsEPlRAtgSwddB9TIZj1oJY0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
