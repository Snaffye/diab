from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import joblib
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("model.pkl")

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
features = [
    "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –±—ã–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω—ã?",  # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–µ–π
    "–ö–∞–∫–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏ (–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)?",  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –≥–ª—é–∫–æ–∑–µ
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)",  # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –æ –¥–∞–≤–ª–µ–Ω–∏–∏
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ª–∏—à–Ω–∏–π –≤–µ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—Ç–∞–Ω–∏–µ–º?",  # –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ –º–∞—Å—Å–µ —Ç–µ–ª–∞
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∂–∞–∂–¥—É?",  # –í–æ–ø—Ä–æ—Å –æ –∂–∞–∂–¥–µ –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–∏–∞–±–µ—Ç–∞
    "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —á–∞—Å—Ç—ã–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è?",  # –ü—Ä–∏–∑–Ω–∞–∫ –¥–∏–∞–±–µ—Ç–∞
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –æ–±—ã—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ? –ë—ã–≤–∞–µ—Ç –ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å?",  # –í–æ–ø—Ä–æ—Å –æ–± –æ–±—â–µ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"  # –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
]

user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n\n"
                                    "1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –±—ã–ª–∏ –±–µ—Ä–µ–º–µ–Ω–Ω—ã?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if chat_id not in user_data:
        user_data[chat_id] = []

    try:
        value = float(text)
        user_data[chat_id].append(value)

        if len(user_data[chat_id]) < len(features):
            next_question = features[len(user_data[chat_id])]
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {next_question}:")
        else:
            X = np.array(user_data[chat_id]).reshape(1, -1)
            prediction = model.predict(X)[0]
            result = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" if prediction == 0 else "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            user_data[chat_id] = []  # —Å–±—Ä–æ—Å
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token("7473045709:AAF8lTAD9t-xsEPlRAtgSwddB9TIZj1oJY0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
