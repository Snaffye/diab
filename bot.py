from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import joblib
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("model.pkl")

# –í–æ–ø—Ä–æ—Å—ã
features = [
    "–ö–∞–∫–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏? (–≤ –º–≥/–¥–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 90‚Äì200)",
    "–ö–∞–∫–æ–µ —É –≤–∞—Å –≤–µ—Ä—Ö–Ω–µ–µ –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80‚Äì180)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ª–∏—à–Ω–∏–π –≤–µ—Å? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ú–¢ (BMI, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18‚Äì50)",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ —Å–ª–∞–¥–∫–æ–µ? (–æ—Ç 0 ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –¥–æ 10 ‚Äî –æ—á–µ–Ω—å —á–∞—Å—Ç–æ)",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∂–∞–∂–¥—É? (–æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 0 ‚Äî –Ω–∏–∫–æ–≥–¥–∞ –¥–æ 10 ‚Äî –æ—á–µ–Ω—å —á–∞—Å—Ç–æ)",
    "–ë—ã–≤–∞—é—Ç –ª–∏ —á–∞—Å—Ç—ã–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è? (–æ—Ç 0 ‚Äî –Ω–µ—Ç –¥–æ 10 ‚Äî –æ—á–µ–Ω—å —á–∞—Å—Ç–æ)",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å? (–æ—Ç 0 ‚Äî –Ω–µ—Ç –¥–æ 10 ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ)",
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 10 –¥–æ 100)",
    "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? (–æ—Ç 0 ‚Äî –Ω–µ—Ç –¥–æ 10 ‚Äî –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)"
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_states = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_states[chat_id] = {
        "answers": [],
        "awaiting_input": True
    }
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏:\n\n" + features[0])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if chat_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å.")
        return

    state = user_states[chat_id]

    if not state["awaiting_input"]:
        await update.message.reply_text("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
        return

    try:
        value = float(text)
        state["answers"].append(value)

        if len(state["answers"]) < len(features):
            next_question = features[len(state["answers"])]
            await update.message.reply_text(next_question)
        else:
            X = np.array(state["answers"]).reshape(1, -1)
            prediction = model.predict(X)[0]
            result = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" if prediction == 0 else "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            state["awaiting_input"] = False  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token("7473045709:AAF8lTAD9t-xsEPlRAtgSwddB9TIZj1oJY0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
