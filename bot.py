from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import numpy as np
from sklearn.linear_model import LogisticRegression

# –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
model = LogisticRegression()

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
X_train = [
    [90, 120, 23, 5, 4, 5, 5, 30, 4],
    [120, 130, 30, 6, 3, 6, 5, 40, 3],
    [180, 140, 28, 7, 6, 7, 4, 35, 7],
    [150, 135, 25, 4, 5, 4, 5, 50, 6]
]
y_train = [0, 1, 1, 0]  # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (0) –∏ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (1)

model.fit(X_train, y_train)

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = [
    "–ö–∞–∫–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –≤ –∫—Ä–æ–≤–∏? (–≤ –º–≥/–¥–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 90‚Äì200)",
    "–ö–∞–∫–æ–µ —É –≤–∞—Å –≤–µ—Ä—Ö–Ω–µ–µ –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80‚Äì180)",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ª–∏—à–Ω–∏–π –≤–µ—Å? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ú–¢ (BMI, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18‚Äì50)",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ —Å–ª–∞–¥–∫–æ–µ? (–æ—Ç 0 –¥–æ 10)",
    "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –∂–∞–∂–¥—É? (–æ—Ç 0 –¥–æ 10)",
    "–ë—ã–≤–∞—é—Ç –ª–∏ —á–∞—Å—Ç—ã–µ –º–æ—á–µ–∏—Å–ø—É—Å–∫–∞–Ω–∏—è? (–æ—Ç 0 –¥–æ 10)",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å? (–æ—Ç 0 –¥–æ 10)",
    "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç? (–æ—Ç 10 –¥–æ 100)",
    "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏? (–æ—Ç 0 –¥–æ 10)"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    user_data[chat_id] = []
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏:")
    ask_question(update)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def ask_question(update: Update):
    chat_id = update.message.chat_id
    user_answers = user_data.get(chat_id, [])
    
    if len(user_answers) < len(features):
        question = features[len(user_answers)]
        update.message.reply_text(f"{question}")
    else:
        # –ö–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã, –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        X = np.array(user_answers).reshape(1, -1)
        prediction = model.predict(X)[0]
        result = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫" if prediction == 0 else "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        user_data[chat_id] = []  # —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
def handle_message(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    user_answer = update.message.text
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∏—Å–ª–æ
        answer = float(user_answer)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
        user_data[chat_id].append(answer)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        ask_question(update)
        
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        ask_question(update)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater("7473045709:AAF8lTAD9t-xsEPlRAtgSwddB9TIZj1oJY0", use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
