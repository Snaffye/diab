from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import joblib
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load("model.pkl")

# –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–±–µ–∑ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏)
features = [
    "Glucose",                    # –£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏
    "BloodPressure",              # –ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    "SkinThickness",              # –¢–æ–ª—â–∏–Ω–∞ –∫–æ–∂–Ω–æ–π —Å–∫–ª–∞–¥–∫–∏
    "Insulin",                    # –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Å—É–ª–∏–Ω–∞
    "BMI",                        # –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
    "DiabetesPedigreeFunction",  # –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)
    "Age"                         # –í–æ–∑—Ä–∞—Å—Ç
]

questions = [
    "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 90 –¥–æ 200):",
    "2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 80 –¥–æ 180):",
    "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –∫–æ–∂–Ω–æ–π —Å–∫–ª–∞–¥–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 10 –¥–æ 100 –º–º):",
    "4Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Å—É–ª–∏–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ –æ—Ç 15 –¥–æ 300):",
    "5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ò–ú–¢ (BMI, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 18 –¥–æ 50):",
    "6Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (–Ω–∞—Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –≤ —Å–µ–º—å–µ –±—ã–ª –¥–∏–∞–±–µ—Ç, –æ—Ç 0.0 –¥–æ 2.5):",
    "7Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 10 –¥–æ 100):"
]

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
    await update.message.reply_text(questions[0])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    if chat_id not in user_data:
        user_data[chat_id] = []

    try:
        value = float(text)
        user_data[chat_id].append(value)

        if len(user_data[chat_id]) < len(features):
            await update.message.reply_text(questions[len(user_data[chat_id])])
        else:
            X = np.array(user_data[chat_id]).reshape(1, -1)
            prediction = model.predict(X)[0]
            result = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞" if prediction == 0 else "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–∏–∞–±–µ—Ç–∞"
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            user_data[chat_id] = []
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

def main():
    app = ApplicationBuilder().token("7473045709:AAF8lTAD9t-xsEPlRAtgSwddB9TIZj1oJY0").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
